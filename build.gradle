buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}




plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'java'
    id "com.diffplug.spotless" version "5.12.4+"
    id "com.matthewprenger.cursegradle" version "1.4.0+"
    id "com.modrinth.minotaur" version "1.2.1+"
    id "idea"
    id 'org.parchmentmc.compass' version '0.8.1+'
    id 'org.parchmentmc.writtenbooks' version '0.5.+'
    id 'java-base'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.4+'
    //id 'fabric-loom' version '0.12-SNAPSHOT'
    //id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.11.0-SNAPSHOT" apply false
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

apply plugin: 'org.spongepowered.mixin'

group = 'net.darkexplosiveqwx.darkcore.DarkCore'
version = '0.0.1'
archivesBaseName = 'darkcore'


java {
    archivesBaseName = 'darkcore'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: '2022.09.04-1.19.2'
    mappings channel: 'official', version: '1.19.2'
    //TODO:UPDATE from https://github.com/ParchmentMC/Parchment/wiki/Getting-Started

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'darkcore'

            mods {
                darkcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'darkcore'

            mods {
                darkcore {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'darkcore'

            mods {
                darkcore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'darkcore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                darkcore {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
        }
    }
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }


    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    mavenLocal()
    mavenCentral()
    maven {
        url "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "dev.architectury"
        }
    }
    maven {
        url "https://maven.bai.lol"
        content {
            includeGroup "mcp.mobius.waila"
            includeGroup "lol.bai"
        }
    }
    maven {
        url "https://maven.parchmentmc.net/"
        content {
            includeGroup "org.parchmentmc.data"
        }
    }
    // For the "No Indium?" mod
    maven {
        url = 'https://maven.cafeteria.dev/releases/'
        content {
            includeGroup "me.luligabi"
        }
    }

    maven {
        name = "MelanX maven"
        url = 'https://maven.melanx.de/'
    }

    maven{
        name = "Sponge maven"
        url = uri("https://repo.spongepowered.org/repository/maven-public/")
    }

    maven {
        name = "blamejared"
        url "https://maven.blamejared.com/"
    }

    maven {
        name = "blakesmods"
        url 'https://maven.blakesmods.com'
    }

    maven {url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'}

    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://maven.tterrag.com/" }
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "henkelmax.public"
        url = 'https://maven.maxhenkel.de/repository/public'
    }

    maven {
        name "expandability"
        url "https://maven.florens.be"
    }

    maven { url "https://maven.ryanliptak.com/" }

    maven {
        name 'CC: Tweaked'
        url 'https://squiddev.cc/maven/'
    }



    maven {
        name = "Modmaven"
        url = uri("https://modmaven.dev/")

        content {
            includeGroup("appeng")
            includeGroup("mekanism")
        }
    }

    maven {
        name = "Progwml6 maven"
        url = uri("https://dvs1.progwml6.com/files/maven/")

        content {
            includeGroup("mezz.jei")
        }
    }

    maven {
        name = "Local"
        url = file("libs").toURI()
    }
    mavenCentral()
}

dependencies {

    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft("net.minecraftforge:forge:${mc_version}-${forge_version}")



    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))


    compileOnly(fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:api"))
    runtimeOnly(fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:all"))

    implementation(fg.deobf("appeng:appliedenergistics2:${ae2_version}"))

    runtimeOnly fg.deobf("curse.maven:mekanism-268560:3922056")


    //implementation(fg.deobf("appeng:appliedenergistics2:${ae2_version}"))



    annotationProcessor fg.deobf("org.moddingx:LibX:${mc_version}-${libx_version}")
    implementation fg.deobf("org.moddingx:LibX:${mc_version}-${libx_version}")


    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}:api")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}:")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")

    compileOnly fg.deobf("vazkii.autoreglib:AutoRegLib:${arl_version}")
    runtimeOnly fg.deobf("vazkii.autoreglib:AutoRegLib:${arl_version}")



    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19:3.1.16')


    //will work


    implementation(fg.deobf("com.blakebr0.cucumber:Cucumber:${mc_version}-${cl_version}"))
    implementation(fg.deobf("com.blakebr0.mysticalagriculture:MysticalAgriculture:${mc_version}-${mac_version}"))
    implementation(fg.deobf("com.blakebr0.mysticalagradditions:MysticalAgradditions:${mc_old_version}-${myst_agraradditions_version}"))
    implementation(fg.deobf("com.blakebr0.mysticalcustomization:MysticalCustomization:${mc_old_version}-${myst_custom_version}"))
    implementation(fg.deobf("com.blakebr0.pickletweaks:PickleTweaks:${mc_old_version}-${pickle_tweaks_version}"))
    implementation(fg.deobf("com.blakebr0.morebuckets:MoreBuckets:${mc_old_version}-${more_buckets_version}"))

    implementation(fg.deobf("com.blakebr0.extendedcrafting:ExtendedCrafting:${mc_old_version}-${extended_crafting_version}"))
    //implementation(fg.deobf("com.blakebr0.ironjetpacks:IronJetpacks:${mc_old_version}-${iron_jetpacks_version}"))


    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    compileOnly fg.deobf("curse.maven:balm-531761:${balm_cf_file_id}")
    compileOnly fg.deobf("curse.maven:craftingtweaks-233071:${crafting_tweaks_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:craftingtweaks-233071:${crafting_tweaks_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:balm-531761:${balm_cf_file_id}")

    //compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}")
    //runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}")


    //implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${mc_version}-${tb_version}")


    compileOnly fg.deobf("curse.maven:the-one-probe-245211:3606616")


    //implementation fg.deobf("curse.maven:cyclopscore-${cyclopscore_version}")

    //compile "net.darkhax.darkutilities:DarkUtilities-${mc_version}:${dark_utilities_version}"

    //implementation fg.deobf("teamtwilight:twilightforest:${twilightforest_version}:universal")


    //runtimeOnly fg.deobf("curse.maven:curious-armor-stands-398784:3579775")
    //compileOnly fg.deobf("curse.maven:curious-armor-stands-398784:3579775")
    //implementation fg.deobf("be.florens:expandability-forge:6.0.0")

    compileOnly fg.deobf('curse.maven:controllable-317269:3873303')
    runtimeOnly fg.deobf('curse.maven:configured-457570:3872190')

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")

    // d implementation fg.deobf("curse.maven:badpackets-615134:3773642")
    //implementation fg.deobf("curse.maven:wthit-455982:3856256")
    //compileOnly fg.deobf("curse.maven:jade-324717:3834997")

    //compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:5.0.38")
    //testCompileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:5.0.38")


    compileOnly "curse.maven:inventorio-497122:3963529" //Forge


    //compileOnly fg.deobf("squeek.appleskin:appleskin-forge:${apple_skin_version}:api")
    //runtimeOnly fg.deobf("squeek.appleskin:appleskin-forge:${apple_skin_version}")

    compileOnly fg.deobf("curse.maven:CYCLIC-239286:3708026")
    //runtimeOnly fg.deobf("curse.maven:CYCLIC-239286:3708026")

    compileOnly fg.deobf("org.squiddev:cc-tweaked-${mc_old_version}:${cc_tweaked_version}")
    compileOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}")
    runtimeOnly fg.deobf("org.squiddev:cc-tweaked-${mc_old_version}:${cc_tweaked_version}")
    runtimeOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}")

    compileOnly fg.deobf("net.darkhax.gamestages:GameStages-Forge-${mc_old_version}:${gamestages_version}")
    //runtimeOnly fg.deobf("net.darkhax.gamestages:GameStages-Forge-${mc_old_version}:${gamestages_version}")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    compileOnly fg.deobf("curse.maven:quark-243121:${quark_cf_file_id}")
    compileOnly fg.deobf("curse.maven:autoreglib-250363:${autoreglib_cf_file_id}")
    //runtimeOnly fg.deobf("curse.maven:quark-243121:${quark_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:autoreglib-250363:${autoreglib_cf_file_id}")

    if (findProject(':SophisticatedCore') != null) {
        implementation project(':SophisticatedCore')
    } else {
        compileOnly fg.deobf("curse.maven:sophisticatedcore-618298:${sc_cf_file_id}")
        //runtimeOnly fg.deobf("curse.maven:sophisticatedcore-618298:${sc_cf_file_id}")
    }

    /*compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        exclude group: "net.minecraftforge", module: "forge"
    }
    implementation fg.deobf("curse.maven:jade-324717:${jade_curse_id}")

    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
    }
**/

    // compileOnly fg.deobf(group: 'info.journeymap', name: 'journeymap-api', version: project.journeymap_api_forge_version, changing: true)
    // runtimeOnly fg.deobf("curse.maven:journeymap-${project.journeymap_project_id}:${project.journeymap_forge_file_id}")

    //compileOnly(fg.deobf("me.shedaniel.cloth:cloth-config-forge:8.0.75"))
    //runtimeOnly(fg.deobf("me.shedaniel.cloth:cloth-config-forge:8.0.75"))

    //implementation fg.deobf("curse.maven:jade-324717:3544015")
    //implementation fg.deobf("curse.maven:storage-drawers-223852:3574029")

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.jetbrains:annotations:23.0.0'

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    annotationProcessor 'com.google.code.gson:gson:2.9.0'
    annotationProcessor 'com.google.guava:guava:31.1-jre'
    annotationProcessor 'org.ow2.asm:asm-tree:9.3'
    annotationProcessor 'org.ow2.asm:asm-commons:9.3'
    annotationProcessor 'org.ow2.asm:asm-util:9.3'

    //implementation "org.moddingx:CurseWrapper:3.0"

	implementation 'org.jsoup:jsoup:1.15.3'
	implementation "net.sf.jopt-simple:jopt-simple:6.0-alpha-3"



    //spigot

    compileOnly 'org.spigotmc:spigot-api:1.19.2-R0.1-SNAPSHOT'

    //java

    implementation('org.controlsfx:controlsfx:11.1.1')
    implementation('com.dlsc.formsfx:formsfx-core:11.5.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('net.synedra:validatorfx:0.3.1') {
        exclude(group: 'org.openjfx')
    }
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')
    implementation('eu.hansolo:tilesfx:17.1.9') {
        exclude(group: 'org.openjfx')
    }
    implementation('com.github.almasb:fxgl:17.1') {
        exclude(group: 'org.openjfx')
    }

    //testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    //testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")


    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")







    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "darkcore",
                "Specification-Vendor"    : "darkexplosiveqwx",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "darkexplosiveqwx",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

println "Build DarkCore successful! "
